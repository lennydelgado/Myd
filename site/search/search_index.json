{"config":{"indexing":"full","lang":["fr"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Myd \u00b6 Documentation : https://lennydelgado.github.io/Myd/ Source Code : https://github.com/lennydelgado/Myd Voici la documentation du projet Myd \u00e0 destination de tous les usagers ou intervenant du projet, souhaitant comprendre les aspects fonctionnel et technique. Myd est un outil qui permet d\u2019automatiser la mise en container Docker d\u2019un site web g\u00e9n\u00e9r\u00e9 par MkDocs ainsi que sa mise en ligne par serveur web Nginx .","title":"Accueil"},{"location":"#myd","text":"Documentation : https://lennydelgado.github.io/Myd/ Source Code : https://github.com/lennydelgado/Myd Voici la documentation du projet Myd \u00e0 destination de tous les usagers ou intervenant du projet, souhaitant comprendre les aspects fonctionnel et technique. Myd est un outil qui permet d\u2019automatiser la mise en container Docker d\u2019un site web g\u00e9n\u00e9r\u00e9 par MkDocs ainsi que sa mise en ligne par serveur web Nginx .","title":"Myd"},{"location":"01-Myd-Project/create-mkdocs-website/","text":"Votre site \u00b6 Avant toute chose, il vous faut votre site avant de pouvoir utiliser le projet. Voyons comment le faire ensemble. Commencez par cr\u00e9er un r\u00e9pertoire GitHub , pour \u00e7a, il faudra d\u2019abord, vous cr\u00e9e un compte si ce n\u2019est pas d\u00e9j\u00e0 fait. Une fois, votre r\u00e9pertoire cr\u00e9e, vous allez devoir le cloner. $ git clone git@github.com:votre-nom-utilisateur/nom-du-r\u00e9pertoire.git <span style=\"color: green;\">INFO</span>: - Clonage dans 'nom-du-r\u00e9pertoire'... <span style=\"color: green;\">INFO</span>: - Vous semblez avoir clon\u00e9 un r\u00e9po vide. Une fois que vous \u00eates dans votre r\u00e9pertoire vide vous allez cr\u00e9er la base de votre site \u00e0 l\u2019aide de la commande : $ mkdocs new docs <span style=\"color: green;\">INFO</span>: - Creating project directory : docs <span style=\"color: green;\">INFO</span>: - Writing config file : docs\\mkdocs.yml <span style=\"color: green;\">INFO</span>: - Writing initial docs : docs\\docs\\index.md Si tout, c\u2019est bien pass\u00e9 vous devriez vous retrouvez avec ceci : Votre r\u00e9pertoire \u2514\u2500\u2500 docs \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 index.md \u2514\u2500\u2500 mkdocs.yml Info Il faut si vous souhaitez utiliser Myd , obligatoirement appeler son fichier cr\u00e9e par la commande mkdocs new \"nom du fichier\" que le fichiers soit nomm\u00e9e docs . Maintenant, que vous avez la base de votre site web, je vous invite \u00e0 regarder la documentation de MkDocs ainsi que des r\u00e9pertoires publique de documentation comme celle de Typer pour voir ce que vous pouvez faire. Fa\u00eete votre site web comme vous le d\u00e9sirez et une fois qu\u2019il est pr\u00eat vous pouvez passer \u00e0 l\u2019utilisation de Myd .","title":"Mise en place MkDocs"},{"location":"01-Myd-Project/create-mkdocs-website/#votre-site","text":"Avant toute chose, il vous faut votre site avant de pouvoir utiliser le projet. Voyons comment le faire ensemble. Commencez par cr\u00e9er un r\u00e9pertoire GitHub , pour \u00e7a, il faudra d\u2019abord, vous cr\u00e9e un compte si ce n\u2019est pas d\u00e9j\u00e0 fait. Une fois, votre r\u00e9pertoire cr\u00e9e, vous allez devoir le cloner. $ git clone git@github.com:votre-nom-utilisateur/nom-du-r\u00e9pertoire.git <span style=\"color: green;\">INFO</span>: - Clonage dans 'nom-du-r\u00e9pertoire'... <span style=\"color: green;\">INFO</span>: - Vous semblez avoir clon\u00e9 un r\u00e9po vide. Une fois que vous \u00eates dans votre r\u00e9pertoire vide vous allez cr\u00e9er la base de votre site \u00e0 l\u2019aide de la commande : $ mkdocs new docs <span style=\"color: green;\">INFO</span>: - Creating project directory : docs <span style=\"color: green;\">INFO</span>: - Writing config file : docs\\mkdocs.yml <span style=\"color: green;\">INFO</span>: - Writing initial docs : docs\\docs\\index.md Si tout, c\u2019est bien pass\u00e9 vous devriez vous retrouvez avec ceci : Votre r\u00e9pertoire \u2514\u2500\u2500 docs \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 index.md \u2514\u2500\u2500 mkdocs.yml Info Il faut si vous souhaitez utiliser Myd , obligatoirement appeler son fichier cr\u00e9e par la commande mkdocs new \"nom du fichier\" que le fichiers soit nomm\u00e9e docs . Maintenant, que vous avez la base de votre site web, je vous invite \u00e0 regarder la documentation de MkDocs ainsi que des r\u00e9pertoires publique de documentation comme celle de Typer pour voir ce que vous pouvez faire. Fa\u00eete votre site web comme vous le d\u00e9sirez et une fois qu\u2019il est pr\u00eat vous pouvez passer \u00e0 l\u2019utilisation de Myd .","title":"Votre site"},{"location":"01-Myd-Project/how-to-use-myd-project/","text":"Introduction \u00b6 Maintenant, que vous avez vu comment installer le projet, nous allons voir ensemble comment l\u2019utiliser et ceci \u00e9tapes par \u00e9tapes. Attention Avant de passer \u00e0 la prochaine \u00e9tape assurez de bien avoir install\u00e9 les pr\u00e9requis ainsi que d\u2019avoir cr\u00e9\u00e9 votre premier site avec MkDocs . Comment on se sert du projet ? \u00b6 Pr\u00e9paration \u00b6 Si vous avez tout bien install\u00e9, aller dans le r\u00e9pertoire du projet et vous devriez avoir ceci : Myd-project/ \u2502 \u251c\u2500\u2500 debian_myd/ \u2502 \u251c\u2500\u2500 build-debian.sh \u2502 \u2514\u2500\u2500 debian_myd.dockerfile \u2502 \u251c\u2500\u2500 python_myd/ \u2502 \u251c\u2500\u2500 build-python.sh \u2502 \u2514\u2500\u2500 python3.10.4.dockerfile \u2502 \u251c\u2500\u2500 nginx/ \u2502 \u251c\u2500\u2500 build-myd-docs.sh \u2502 \u251c\u2500\u2500 first-build-myd-mkdocs.sh \u2502 \u251c\u2500\u2500 myd-mkdocs.dockerfile \u2502 \u251c\u2500\u2500 myd-docs.dockerfile \u2502 \u2514\u2500\u2500 run-nginx.sh | \u251c\u2500\u2500 conf/ | \u2514\u2500\u2500 exemple.conf | \u251c\u2500\u2500 logs/ | \u251c\u2500\u2500 requirement.txt | \u2514\u2500\u2500 myd.py On peut d\u00e9sormais regarder comment le projet fonctionne en utilisant la commande suivante : $ ( env-myd ) python myd.py --help Usage: myd.py [OPTIONS] COMMAND [ARGS]... \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 --install-completion Install completion for the current shell. --help Show this message and exit. --show-completion Show completion for the current shell, to copy it or customize the installation. \u256d\u2500 Commands \ud83d\udcbb \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 build Build each Docker container as needed to run. \ud83e\uddf1 config Create configuration file for Myd. \u270d run Launches the Nginx server. \ud83d\ude80 Nous verrons plus tard ensemble comment utiliser les diff\u00e9rentes commandes. Cr\u00e9ation du fichier de configuration \u00b6 Pour pouvoir utiliser Myd , il vous faudra au pr\u00e9alable g\u00e9n\u00e9rer le fichier de configuration. Attention Le fichier de configuration est format\u00e9 de mani\u00e8re que Myd puisse comprendre les diff\u00e9rentes informations n\u00e9cessaires \u00e0 son bon fonctionnement. Vous ne pouvez pas changer l\u2019ordre des lignes ou ajouter des commentaires. Pour g\u00e9n\u00e9rer le fichier de configuration dans le bon format que Myd \u00e0 besoins, il suffit d\u2019utiliser la commande config . Regardons comment la commande fonctionne : $ ( env-myd ) python myd.py config --help Usage: myd.py config [OPTIONS] Create configuration file for Myd. \u270d \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 --edit --no-edit Used to modify any existing configuration file [default: no-edit] --help Show this message and exit. On peut d\u00e9sormais cr\u00e9e notre premier fichier de configuration. $ ( env-myd ) python myd.py config <span style=\"color: lime;\">Input name you want for configuration file:</span> $ ( env-myd ) exemple <span style=\"color: lime;\">Input name you want for configuration file:</span> $ ( env-myd ) votre-url-docker <span style=\"color: lime;\">Input Python version (3.X.X):</span> $ ( env-myd ) 3 .10.4 <span style=\"color: lime;\">Input GitHub Token:</span> $ ( env-myd ) votre_token_GitHub <span style=\"color: lime;\">Input GitHub Repository:</span> $ ( env-myd ) https://github.com/votre-nom-d ' utilisateur/nom-du-repo/archive/nom-de-la-branche.zip <span style=\"color: lime;\">Input GitHub username:</span> $ ( env-myd ) username <span style=\"color: lime;\">Input GitHub email:</span> $ ( env-myd ) your@mail.com <span style=\"color: lime;\">Input commit message:</span> $ ( env-myd ) commit_message <span style=\"color: lime;\">Input external port will be used to run server:</span> $ ( env-myd ) 8989 <span style=\"color: lime;\">Success</span>: The file '<span style=\"color: red;\">exemple.conf</span>' has been created successfully Maintenant, que le fichier est cr\u00e9\u00e9, vous devriez avoir un fichier .conf dans le dossier conf du projet. Il devrait \u00eatre pr\u00e9sent\u00e9 comme ceci : REPO_DOCKER_URL=your_docker_url PYTHON_VERSION=3.X.X GIT_TOKEN=your_github_token GIT_REPO=https://github.com/user/project-name/archive/name-of-branch.zip GIT_USERNAME=username GIT_EMAIL=your@mail.com COMMIT_MESSAGE=commit message EXT_PORT=8989 Info Si vous utilisez comme Harbour en tant que REPO_DOCKER_URL il vous faudra les droits d\u2019\u00e9criture dans ce dernier sinon vous rencontrerais des probl\u00e8mes lors de l\u2019ex\u00e9cution des containers. Attention L\u2019URL du r\u00e9pertoire GitHub doit \u00eatre format\u00e9 comme ci-dessus, vous ne pouvez pas simplement faire un copi\u00e9 de l\u2019URL. Il ne faut \u00e9galement pas de / \u00e0 la fin de votre URL Docker . Mise en place des containers \u00b6 Pour pouvoir faire fonctionner notre serveur web Nginx , il faut au pr\u00e9alable \u00e9tablir le container dans lequel on retrouveras notre site web g\u00e9n\u00e9r\u00e9 par MkDocs . Regardons comment cela fonctionne : $ ( env-myd ) python myd.py build --help Usage: myd.py build [OPTIONS] File Build each Docker container as needed to run. \ud83e\uddf1 \u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 file File Enter which configuration file you want use: [exemple.conf, ...][required] \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 option Option Use to build specific container: debian, python, nginx [default: all] --help Show this message and exit. On peut voir que contrairement \u00e0 config on a ici un argument obligatoire qui est le fichier que vous avez normalement cr\u00e9\u00e9 pr\u00e9c\u00e9demment. Avant de continuer regardons \u00e0 quoi sert l\u2019argument option . Myd a besoin de cr\u00e9er diff\u00e9rents containers pour \u00e9tablir le serveur web final. On cr\u00e9e tout d\u2019abord un container Docker avec un image Debian bulleye slim qui est l\u2019environnement Linux dans lequel notre serveur web va \u00eatre d\u00e9ploy\u00e9s. Ensuite, on cr\u00e9e notre propre container Python depuis l\u2019image Debian o\u00f9 on installe donc Python . Enfin, on cr\u00e9e le container Nginx en y ajoutant les pages de notre site web r\u00e9cup\u00e9r\u00e9 depuis le lien du r\u00e9pertoire GitHub pr\u00e9sent dans le fichier de configuration. Par d\u00e9faut l\u2019argument option est \u00e9gal \u00e0 all ce qui signifie que tous les containers vont \u00eatre recr\u00e9\u00e9. Cependant, on n\u2019a pas toujours besoin de reconstruire tous les containers, c\u2019est pour \u00e7a qu\u2019 option permet de construire sp\u00e9cifiquement le container choisis. Note La commande build peux prendre un long moment la premi\u00e8re fois pour g\u00e9n\u00e9rer pas de panique tant que le chargement est en cour c\u2019est que les containers sont en train d\u2019\u00eatre construit. Pour notre premier lancement, nous allons effectuer la commande suivante : $ ( env-myd ) python myd.py build exemple.conf Building debian container... <span style=\"color: lime;\">The debian container has been successfully built</span> Building python container... <span style=\"color: lime;\">The python container has been successfully built</span> Building nginx container... <span style=\"color: lime;\">The nginx container has been successfully built</span> <span style=\"color: cyan;\">Everything finished being built !</span> Info Si vous souhaitez voir ce qu\u2019a renvoy\u00e9 chacun des containers, vous trouverez dans le dossier logs tous les fichiers logs des diff\u00e9rents containers. Si vous voyez le message vous disant que tout a bien \u00e9t\u00e9 construit, vous pouvez maintenant passer \u00e0 la prochaine \u00e9tape, si vous avez quelconque souci h\u00e9sit\u00e9 pas \u00e0 lire les informations de votre fichier de configuration ainsi que les fichiers logs . Lancement de Myd \u00b6 Maintenant, vous \u00eates pr\u00eat pour le lancement de votre site h\u00e9berg\u00e9 par Nginx . Regardons comment cela fonctionne : $ ( env-myd ) python myd.py run --help Usage: myd.py run [OPTIONS] File Launches the Nginx server. \ud83d\ude80 \u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 file File [required] Enter which configuration file you want use: [exemple.conf, ...] \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 --help Show this message and exit. Vous devez une nouvelle fois ici sp\u00e9cifier votre fichier de configuration \u00e0 utiliser, mais aussi le port externe que vous souhaitez utiliser. Fa\u00eetes de sortes \u00e0 ce que le port soit une valeur haute entre 8000 et 9000 par exemple pour \u00e9viter les conflits avec des ports pouvant d\u00e9j\u00e0 \u00eatre utilis\u00e9e par d\u2019autres programmes. Une fois les containers construits, vous pouvez lancer la commande ci-dessous : $ ( env-myd ) python myd.py run exemple.conf Running nginx container on external port: 8989... <span style=\"color: lime;\">Success: The server is running on external port 8989</span> Info Il est possible que lorsque vous effectuez des modifications sur votre site sur GitHub cela ne fonctionne pas, il faut supprimer les images Docker ( Docker utilise un cache est votre site n\u2019est pas t\u00e9l\u00e9charger \u00e0 nouveau depuis votre r\u00e9pertoire). Si tout, c\u2019est bien pass\u00e9, vous devriez pouvoir acc\u00e9der \u00e0 votre page web, avant cela assurer vous d\u2019avoir fait la redirection de port. Pour le faire, vous devrez vous rendre dans Visual Studio Code . Puis ouvrez un terminal en cliquant ici : Maintenant, vous devriez avoir une petite fen\u00eatre en bas de l\u2019\u00e9cran qui s\u2019est ouvert. Pour l\u2019exemple lors de la configuration, j\u2019ai choisi le port 8989 . Il ne vous reste plus qu\u2019\u00e0 ajouter votre port en cliquant sur \u201cAjouter un port\u201d. Enfin, vous pouvez d\u00e9sormais acc\u00e9der \u00e0 votre page web en marquant l\u2019URL suivant: http://localhost:votre-port/ Si tout, c\u2019est bien pass\u00e9, vous devriez voir votre site appara\u00eetre ! Remerciment Je vous remercie d\u2019avoir lu jusqu\u2019ici, j\u2019esp\u00e8re avoir \u00e9t\u00e9 claire dans mes explications. Vous souhaitez mettre votre site sur GitHub Pages , pour ce faire rendez-vous ici","title":"Utilisation"},{"location":"01-Myd-Project/how-to-use-myd-project/#introduction","text":"Maintenant, que vous avez vu comment installer le projet, nous allons voir ensemble comment l\u2019utiliser et ceci \u00e9tapes par \u00e9tapes. Attention Avant de passer \u00e0 la prochaine \u00e9tape assurez de bien avoir install\u00e9 les pr\u00e9requis ainsi que d\u2019avoir cr\u00e9\u00e9 votre premier site avec MkDocs .","title":"Introduction"},{"location":"01-Myd-Project/how-to-use-myd-project/#comment-on-se-sert-du-projet","text":"","title":"Comment on se sert du projet ?"},{"location":"01-Myd-Project/how-to-use-myd-project/#preparation","text":"Si vous avez tout bien install\u00e9, aller dans le r\u00e9pertoire du projet et vous devriez avoir ceci : Myd-project/ \u2502 \u251c\u2500\u2500 debian_myd/ \u2502 \u251c\u2500\u2500 build-debian.sh \u2502 \u2514\u2500\u2500 debian_myd.dockerfile \u2502 \u251c\u2500\u2500 python_myd/ \u2502 \u251c\u2500\u2500 build-python.sh \u2502 \u2514\u2500\u2500 python3.10.4.dockerfile \u2502 \u251c\u2500\u2500 nginx/ \u2502 \u251c\u2500\u2500 build-myd-docs.sh \u2502 \u251c\u2500\u2500 first-build-myd-mkdocs.sh \u2502 \u251c\u2500\u2500 myd-mkdocs.dockerfile \u2502 \u251c\u2500\u2500 myd-docs.dockerfile \u2502 \u2514\u2500\u2500 run-nginx.sh | \u251c\u2500\u2500 conf/ | \u2514\u2500\u2500 exemple.conf | \u251c\u2500\u2500 logs/ | \u251c\u2500\u2500 requirement.txt | \u2514\u2500\u2500 myd.py On peut d\u00e9sormais regarder comment le projet fonctionne en utilisant la commande suivante : $ ( env-myd ) python myd.py --help Usage: myd.py [OPTIONS] COMMAND [ARGS]... \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 --install-completion Install completion for the current shell. --help Show this message and exit. --show-completion Show completion for the current shell, to copy it or customize the installation. \u256d\u2500 Commands \ud83d\udcbb \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 build Build each Docker container as needed to run. \ud83e\uddf1 config Create configuration file for Myd. \u270d run Launches the Nginx server. \ud83d\ude80 Nous verrons plus tard ensemble comment utiliser les diff\u00e9rentes commandes.","title":"Pr\u00e9paration"},{"location":"01-Myd-Project/how-to-use-myd-project/#creation-du-fichier-de-configuration","text":"Pour pouvoir utiliser Myd , il vous faudra au pr\u00e9alable g\u00e9n\u00e9rer le fichier de configuration. Attention Le fichier de configuration est format\u00e9 de mani\u00e8re que Myd puisse comprendre les diff\u00e9rentes informations n\u00e9cessaires \u00e0 son bon fonctionnement. Vous ne pouvez pas changer l\u2019ordre des lignes ou ajouter des commentaires. Pour g\u00e9n\u00e9rer le fichier de configuration dans le bon format que Myd \u00e0 besoins, il suffit d\u2019utiliser la commande config . Regardons comment la commande fonctionne : $ ( env-myd ) python myd.py config --help Usage: myd.py config [OPTIONS] Create configuration file for Myd. \u270d \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 --edit --no-edit Used to modify any existing configuration file [default: no-edit] --help Show this message and exit. On peut d\u00e9sormais cr\u00e9e notre premier fichier de configuration. $ ( env-myd ) python myd.py config <span style=\"color: lime;\">Input name you want for configuration file:</span> $ ( env-myd ) exemple <span style=\"color: lime;\">Input name you want for configuration file:</span> $ ( env-myd ) votre-url-docker <span style=\"color: lime;\">Input Python version (3.X.X):</span> $ ( env-myd ) 3 .10.4 <span style=\"color: lime;\">Input GitHub Token:</span> $ ( env-myd ) votre_token_GitHub <span style=\"color: lime;\">Input GitHub Repository:</span> $ ( env-myd ) https://github.com/votre-nom-d ' utilisateur/nom-du-repo/archive/nom-de-la-branche.zip <span style=\"color: lime;\">Input GitHub username:</span> $ ( env-myd ) username <span style=\"color: lime;\">Input GitHub email:</span> $ ( env-myd ) your@mail.com <span style=\"color: lime;\">Input commit message:</span> $ ( env-myd ) commit_message <span style=\"color: lime;\">Input external port will be used to run server:</span> $ ( env-myd ) 8989 <span style=\"color: lime;\">Success</span>: The file '<span style=\"color: red;\">exemple.conf</span>' has been created successfully Maintenant, que le fichier est cr\u00e9\u00e9, vous devriez avoir un fichier .conf dans le dossier conf du projet. Il devrait \u00eatre pr\u00e9sent\u00e9 comme ceci : REPO_DOCKER_URL=your_docker_url PYTHON_VERSION=3.X.X GIT_TOKEN=your_github_token GIT_REPO=https://github.com/user/project-name/archive/name-of-branch.zip GIT_USERNAME=username GIT_EMAIL=your@mail.com COMMIT_MESSAGE=commit message EXT_PORT=8989 Info Si vous utilisez comme Harbour en tant que REPO_DOCKER_URL il vous faudra les droits d\u2019\u00e9criture dans ce dernier sinon vous rencontrerais des probl\u00e8mes lors de l\u2019ex\u00e9cution des containers. Attention L\u2019URL du r\u00e9pertoire GitHub doit \u00eatre format\u00e9 comme ci-dessus, vous ne pouvez pas simplement faire un copi\u00e9 de l\u2019URL. Il ne faut \u00e9galement pas de / \u00e0 la fin de votre URL Docker .","title":"Cr\u00e9ation du fichier de configuration"},{"location":"01-Myd-Project/how-to-use-myd-project/#mise-en-place-des-containers","text":"Pour pouvoir faire fonctionner notre serveur web Nginx , il faut au pr\u00e9alable \u00e9tablir le container dans lequel on retrouveras notre site web g\u00e9n\u00e9r\u00e9 par MkDocs . Regardons comment cela fonctionne : $ ( env-myd ) python myd.py build --help Usage: myd.py build [OPTIONS] File Build each Docker container as needed to run. \ud83e\uddf1 \u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 file File Enter which configuration file you want use: [exemple.conf, ...][required] \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 option Option Use to build specific container: debian, python, nginx [default: all] --help Show this message and exit. On peut voir que contrairement \u00e0 config on a ici un argument obligatoire qui est le fichier que vous avez normalement cr\u00e9\u00e9 pr\u00e9c\u00e9demment. Avant de continuer regardons \u00e0 quoi sert l\u2019argument option . Myd a besoin de cr\u00e9er diff\u00e9rents containers pour \u00e9tablir le serveur web final. On cr\u00e9e tout d\u2019abord un container Docker avec un image Debian bulleye slim qui est l\u2019environnement Linux dans lequel notre serveur web va \u00eatre d\u00e9ploy\u00e9s. Ensuite, on cr\u00e9e notre propre container Python depuis l\u2019image Debian o\u00f9 on installe donc Python . Enfin, on cr\u00e9e le container Nginx en y ajoutant les pages de notre site web r\u00e9cup\u00e9r\u00e9 depuis le lien du r\u00e9pertoire GitHub pr\u00e9sent dans le fichier de configuration. Par d\u00e9faut l\u2019argument option est \u00e9gal \u00e0 all ce qui signifie que tous les containers vont \u00eatre recr\u00e9\u00e9. Cependant, on n\u2019a pas toujours besoin de reconstruire tous les containers, c\u2019est pour \u00e7a qu\u2019 option permet de construire sp\u00e9cifiquement le container choisis. Note La commande build peux prendre un long moment la premi\u00e8re fois pour g\u00e9n\u00e9rer pas de panique tant que le chargement est en cour c\u2019est que les containers sont en train d\u2019\u00eatre construit. Pour notre premier lancement, nous allons effectuer la commande suivante : $ ( env-myd ) python myd.py build exemple.conf Building debian container... <span style=\"color: lime;\">The debian container has been successfully built</span> Building python container... <span style=\"color: lime;\">The python container has been successfully built</span> Building nginx container... <span style=\"color: lime;\">The nginx container has been successfully built</span> <span style=\"color: cyan;\">Everything finished being built !</span> Info Si vous souhaitez voir ce qu\u2019a renvoy\u00e9 chacun des containers, vous trouverez dans le dossier logs tous les fichiers logs des diff\u00e9rents containers. Si vous voyez le message vous disant que tout a bien \u00e9t\u00e9 construit, vous pouvez maintenant passer \u00e0 la prochaine \u00e9tape, si vous avez quelconque souci h\u00e9sit\u00e9 pas \u00e0 lire les informations de votre fichier de configuration ainsi que les fichiers logs .","title":"Mise en place des containers"},{"location":"01-Myd-Project/how-to-use-myd-project/#lancement-de-myd","text":"Maintenant, vous \u00eates pr\u00eat pour le lancement de votre site h\u00e9berg\u00e9 par Nginx . Regardons comment cela fonctionne : $ ( env-myd ) python myd.py run --help Usage: myd.py run [OPTIONS] File Launches the Nginx server. \ud83d\ude80 \u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 file File [required] Enter which configuration file you want use: [exemple.conf, ...] \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 --help Show this message and exit. Vous devez une nouvelle fois ici sp\u00e9cifier votre fichier de configuration \u00e0 utiliser, mais aussi le port externe que vous souhaitez utiliser. Fa\u00eetes de sortes \u00e0 ce que le port soit une valeur haute entre 8000 et 9000 par exemple pour \u00e9viter les conflits avec des ports pouvant d\u00e9j\u00e0 \u00eatre utilis\u00e9e par d\u2019autres programmes. Une fois les containers construits, vous pouvez lancer la commande ci-dessous : $ ( env-myd ) python myd.py run exemple.conf Running nginx container on external port: 8989... <span style=\"color: lime;\">Success: The server is running on external port 8989</span> Info Il est possible que lorsque vous effectuez des modifications sur votre site sur GitHub cela ne fonctionne pas, il faut supprimer les images Docker ( Docker utilise un cache est votre site n\u2019est pas t\u00e9l\u00e9charger \u00e0 nouveau depuis votre r\u00e9pertoire). Si tout, c\u2019est bien pass\u00e9, vous devriez pouvoir acc\u00e9der \u00e0 votre page web, avant cela assurer vous d\u2019avoir fait la redirection de port. Pour le faire, vous devrez vous rendre dans Visual Studio Code . Puis ouvrez un terminal en cliquant ici : Maintenant, vous devriez avoir une petite fen\u00eatre en bas de l\u2019\u00e9cran qui s\u2019est ouvert. Pour l\u2019exemple lors de la configuration, j\u2019ai choisi le port 8989 . Il ne vous reste plus qu\u2019\u00e0 ajouter votre port en cliquant sur \u201cAjouter un port\u201d. Enfin, vous pouvez d\u00e9sormais acc\u00e9der \u00e0 votre page web en marquant l\u2019URL suivant: http://localhost:votre-port/ Si tout, c\u2019est bien pass\u00e9, vous devriez voir votre site appara\u00eetre ! Remerciment Je vous remercie d\u2019avoir lu jusqu\u2019ici, j\u2019esp\u00e8re avoir \u00e9t\u00e9 claire dans mes explications. Vous souhaitez mettre votre site sur GitHub Pages , pour ce faire rendez-vous ici","title":"Lancement de Myd"},{"location":"01-Myd-Project/install-myd-project/","text":"Installation \u00b6 Pr\u00e9requis \u00b6 Ce projet a \u00e9t\u00e9 enti\u00e8rement r\u00e9alis\u00e9 dans un environnement Linux Debian et il devrais \u00eatre compatible avec tous les syst\u00e8mes supportant Linux. Tout d\u2019abord, vous aurez besoin de Docker pour plus d\u2019informations concernant son installation allez voir la documentation ici . Vous aurez \u00e9galement de Python , vous pouvez l\u2019installer en cliquant ici . Il vous faudra \u00e9galement Pip , pour suivre les instructions d\u2019installation, je vous redirige ici . Enfin, vous aurez aussi besoin de Visual Studio Code . Il vous permettra de faire de la redirection de port , de mani\u00e8re simple. Mise en place environnement virtuel Python \u00b6 Nous allons voir ensemble comment mettre en place l\u2019environnement virtuel Python qui nous servira \u00e0 installer toutes les librairies n\u00e9cessaires au bon fonctionnement du projet. Tapons la commande suivante : $ python -m venv env-myd Cette commande \u00e0 pour effet de vous cr\u00e9e le dossier dans lequel ce trouveras toutes les futures librairies que nous installerons mais d\u2019abord il faut l\u2019activer, pour cela taper la commande suivante : $ source absolute-path-to-project/env-myd/bin/activate Si tout s\u2019est bien pass\u00e9 normalement votre terminal devrais afficher ceci : $ ( env-myd ) <span style=\"color: green;\">INFO</span>: - Ici la parenth\u00e8se nous montre que l'environnement actif est \"env-myd\" Vous pouvez \u00e0 pr\u00e9sent changer l\u2019interpr\u00e9teur Python sur Visual studio code . Pour cela ouvrez Visual studio code , appuyez sur Ctrl + Shift + P puis tapez dans la barre de recherche interpr\u00e9teur , ensuite ajoutez un nouveau chemin pour l\u2019interpr\u00e9teur et entrez le chemin absolu du dossier de l\u2019environnement virtuel. R\u00e9cup\u00e9ration du projet \u00b6 Nous vous donnons ci-dessous la commande \u00e0 effectuer pour cloner le r\u00e9pertoire GitHub , pour cela taper la commande suivante : $ git clone https://github.com/lennydelgado/Myd.git <span style=\"color: green;\">INFO</span>: - Clonage dans 'Myd'... <span style=\"color: green;\">INFO</span>: - R\u00e9ception d'objets: 100% (17/17), 7.77 Mio/s, fait. <span style=\"color: green;\">INFO</span>: - R\u00e9solution des deltas: 100% (2/2), fait. Vous devriez maintenant vous retrouver avec ceci : Myd-project/ \u2502 \u251c\u2500\u2500 debian_myd/ \u2502 \u251c\u2500\u2500 build-debian.sh \u2502 \u2514\u2500\u2500 debian_myd.dockerfile \u2502 \u251c\u2500\u2500 python_myd/ \u2502 \u251c\u2500\u2500 build-python.sh \u2502 \u2514\u2500\u2500 python3.10.4.dockerfile \u2502 \u251c\u2500\u2500 nginx/ \u2502 \u251c\u2500\u2500 build-myd-docs.sh \u2502 \u251c\u2500\u2500 first-build-myd-mkdocs.sh \u2502 \u251c\u2500\u2500 myd-mkdocs.dockerfile \u2502 \u251c\u2500\u2500 myd-docs.dockerfile \u2502 \u2514\u2500\u2500 run-nginx.sh | \u251c\u2500\u2500 conf/ | \u2514\u2500\u2500 exemple.conf | \u251c\u2500\u2500 logs/ | \u251c\u2500\u2500 requirement.txt | \u2514\u2500\u2500 myd.py Installation des d\u00e9pendances \u00b6 Maintenant que vous avez install\u00e9 et activez l\u2019environnement virtuel et r\u00e9cup\u00e9rer le projet vous pouvez installer toutes les librairies n\u00e9cessaires au fonctionnement du projet sans aucune crainte, il vous suffit d\u2019entrer la commande suivante : $ ( env-myd ) pip install -r requirements.txt <span style=\"color: green;\">INFO</span>: - Installation des d\u00e9pendances Maintenant que l\u2019installation est termin\u00e9e je vous invite \u00e0 cr\u00e9e votre premier site avec MkDocs et \u00e0 le publier sur un de vos r\u00e9pertoire GitHub, si c\u2019est d\u00e9j\u00e0 le cas vous pouvez directement pass\u00e9e \u00e0 l\u2019utilisation du projet .","title":"Installation"},{"location":"01-Myd-Project/install-myd-project/#installation","text":"","title":"Installation"},{"location":"01-Myd-Project/install-myd-project/#prerequis","text":"Ce projet a \u00e9t\u00e9 enti\u00e8rement r\u00e9alis\u00e9 dans un environnement Linux Debian et il devrais \u00eatre compatible avec tous les syst\u00e8mes supportant Linux. Tout d\u2019abord, vous aurez besoin de Docker pour plus d\u2019informations concernant son installation allez voir la documentation ici . Vous aurez \u00e9galement de Python , vous pouvez l\u2019installer en cliquant ici . Il vous faudra \u00e9galement Pip , pour suivre les instructions d\u2019installation, je vous redirige ici . Enfin, vous aurez aussi besoin de Visual Studio Code . Il vous permettra de faire de la redirection de port , de mani\u00e8re simple.","title":"Pr\u00e9requis"},{"location":"01-Myd-Project/install-myd-project/#mise-en-place-environnement-virtuel-python","text":"Nous allons voir ensemble comment mettre en place l\u2019environnement virtuel Python qui nous servira \u00e0 installer toutes les librairies n\u00e9cessaires au bon fonctionnement du projet. Tapons la commande suivante : $ python -m venv env-myd Cette commande \u00e0 pour effet de vous cr\u00e9e le dossier dans lequel ce trouveras toutes les futures librairies que nous installerons mais d\u2019abord il faut l\u2019activer, pour cela taper la commande suivante : $ source absolute-path-to-project/env-myd/bin/activate Si tout s\u2019est bien pass\u00e9 normalement votre terminal devrais afficher ceci : $ ( env-myd ) <span style=\"color: green;\">INFO</span>: - Ici la parenth\u00e8se nous montre que l'environnement actif est \"env-myd\" Vous pouvez \u00e0 pr\u00e9sent changer l\u2019interpr\u00e9teur Python sur Visual studio code . Pour cela ouvrez Visual studio code , appuyez sur Ctrl + Shift + P puis tapez dans la barre de recherche interpr\u00e9teur , ensuite ajoutez un nouveau chemin pour l\u2019interpr\u00e9teur et entrez le chemin absolu du dossier de l\u2019environnement virtuel.","title":"Mise en place environnement virtuel Python"},{"location":"01-Myd-Project/install-myd-project/#recuperation-du-projet","text":"Nous vous donnons ci-dessous la commande \u00e0 effectuer pour cloner le r\u00e9pertoire GitHub , pour cela taper la commande suivante : $ git clone https://github.com/lennydelgado/Myd.git <span style=\"color: green;\">INFO</span>: - Clonage dans 'Myd'... <span style=\"color: green;\">INFO</span>: - R\u00e9ception d'objets: 100% (17/17), 7.77 Mio/s, fait. <span style=\"color: green;\">INFO</span>: - R\u00e9solution des deltas: 100% (2/2), fait. Vous devriez maintenant vous retrouver avec ceci : Myd-project/ \u2502 \u251c\u2500\u2500 debian_myd/ \u2502 \u251c\u2500\u2500 build-debian.sh \u2502 \u2514\u2500\u2500 debian_myd.dockerfile \u2502 \u251c\u2500\u2500 python_myd/ \u2502 \u251c\u2500\u2500 build-python.sh \u2502 \u2514\u2500\u2500 python3.10.4.dockerfile \u2502 \u251c\u2500\u2500 nginx/ \u2502 \u251c\u2500\u2500 build-myd-docs.sh \u2502 \u251c\u2500\u2500 first-build-myd-mkdocs.sh \u2502 \u251c\u2500\u2500 myd-mkdocs.dockerfile \u2502 \u251c\u2500\u2500 myd-docs.dockerfile \u2502 \u2514\u2500\u2500 run-nginx.sh | \u251c\u2500\u2500 conf/ | \u2514\u2500\u2500 exemple.conf | \u251c\u2500\u2500 logs/ | \u251c\u2500\u2500 requirement.txt | \u2514\u2500\u2500 myd.py","title":"R\u00e9cup\u00e9ration du projet"},{"location":"01-Myd-Project/install-myd-project/#installation-des-dependances","text":"Maintenant que vous avez install\u00e9 et activez l\u2019environnement virtuel et r\u00e9cup\u00e9rer le projet vous pouvez installer toutes les librairies n\u00e9cessaires au fonctionnement du projet sans aucune crainte, il vous suffit d\u2019entrer la commande suivante : $ ( env-myd ) pip install -r requirements.txt <span style=\"color: green;\">INFO</span>: - Installation des d\u00e9pendances Maintenant que l\u2019installation est termin\u00e9e je vous invite \u00e0 cr\u00e9e votre premier site avec MkDocs et \u00e0 le publier sur un de vos r\u00e9pertoire GitHub, si c\u2019est d\u00e9j\u00e0 le cas vous pouvez directement pass\u00e9e \u00e0 l\u2019utilisation du projet .","title":"Installation des d\u00e9pendances"},{"location":"01-Myd-Project/install-on-github-pages/","text":"Introduction \u00b6 Pour pouvoir mettre votre site sur GitHub Pages vous aurez besoin d\u2019avoir cr\u00e9e un compte GitHub ainsi que cr\u00e9e votre r\u00e9pertoire qui va contenir votre documentation. Note Pour pouvoir utiliser GitHub Pages de mani\u00e8re gratuite il vous faudra obligatoirement un r\u00e9pertoire GitHub public . Pour mettre votre site en priv\u00e9e il vous faudra avoir un abonnement sur GitHub pour plus d\u2019information rendez-vous ici . R\u00e9cup\u00e9ration du site \u00b6 Si vous n\u2019avez pas eu de probl\u00e8me lors du build , un nouveau dossier est apparu sur votre r\u00e9pertoire GitHub et il se nomme site . Ce dossier contient toutes les pages HTML g\u00e9n\u00e9r\u00e9es par MkDocs , si le dossier est bien pr\u00e9sent nous pouvons passer \u00e0 l\u2019\u00e9tape d\u2019apr\u00e8s sinon relancer vous-m\u00eame une g\u00e9n\u00e9ration. Mise en ligne sur GitHub Pages \u00b6 Afin de mettre votre site sur GitHub Pages rendez-vous sur la page internet de votre r\u00e9pertoire puis dans settings puis dans pages comme ci-dessous. Par la suite vous choisissez la m\u00e9thode de d\u00e9ploiement par une GitHub Action et vous cliquez sur configure en dessous de Static HTML . Vous devriez normalement tombez sur cette page. Nous allons modifier ce fichier pour faire que d\u00e8s lors on utilise Myd , la g\u00e9n\u00e9ration et la publication se fasse automatiquement lors d\u2019une modification dans le dossier site. Il faut effectuer des modifications aux lignes 7 et 39 comme ci-dessous. Vous pouvez enregistrer, gr\u00e2ce \u00e0 \u00e7a d\u00e8s que vous utiliserez \u00e0 nouveaux Myd votre documentation seras mise \u00e0 jour.","title":"Mise en ligne sur GitHub Page"},{"location":"01-Myd-Project/install-on-github-pages/#introduction","text":"Pour pouvoir mettre votre site sur GitHub Pages vous aurez besoin d\u2019avoir cr\u00e9e un compte GitHub ainsi que cr\u00e9e votre r\u00e9pertoire qui va contenir votre documentation. Note Pour pouvoir utiliser GitHub Pages de mani\u00e8re gratuite il vous faudra obligatoirement un r\u00e9pertoire GitHub public . Pour mettre votre site en priv\u00e9e il vous faudra avoir un abonnement sur GitHub pour plus d\u2019information rendez-vous ici .","title":"Introduction"},{"location":"01-Myd-Project/install-on-github-pages/#recuperation-du-site","text":"Si vous n\u2019avez pas eu de probl\u00e8me lors du build , un nouveau dossier est apparu sur votre r\u00e9pertoire GitHub et il se nomme site . Ce dossier contient toutes les pages HTML g\u00e9n\u00e9r\u00e9es par MkDocs , si le dossier est bien pr\u00e9sent nous pouvons passer \u00e0 l\u2019\u00e9tape d\u2019apr\u00e8s sinon relancer vous-m\u00eame une g\u00e9n\u00e9ration.","title":"R\u00e9cup\u00e9ration du site"},{"location":"01-Myd-Project/install-on-github-pages/#mise-en-ligne-sur-github-pages","text":"Afin de mettre votre site sur GitHub Pages rendez-vous sur la page internet de votre r\u00e9pertoire puis dans settings puis dans pages comme ci-dessous. Par la suite vous choisissez la m\u00e9thode de d\u00e9ploiement par une GitHub Action et vous cliquez sur configure en dessous de Static HTML . Vous devriez normalement tombez sur cette page. Nous allons modifier ce fichier pour faire que d\u00e8s lors on utilise Myd , la g\u00e9n\u00e9ration et la publication se fasse automatiquement lors d\u2019une modification dans le dossier site. Il faut effectuer des modifications aux lignes 7 et 39 comme ci-dessous. Vous pouvez enregistrer, gr\u00e2ce \u00e0 \u00e7a d\u00e8s que vous utiliserez \u00e0 nouveaux Myd votre documentation seras mise \u00e0 jour.","title":"Mise en ligne sur GitHub Pages"}]}